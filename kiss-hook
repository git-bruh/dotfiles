#!/bin/sh -e

# Stolen (mostly) from https://git.ebc.li/kiss/optim

flagsed() {
    export CFLAGS="$(echo "$CFLAGS" | sed "$1")"
    export CXXFLAGS="$(echo "$CXXFLAGS" | sed "$1")"
    export LDFLAGS="$(echo "$LDFLAGS" | sed "$1")"
}

nolto() {
    log "$PKG" "LTO disabled"

    flagsed "s/-flto=auto//g"
}

addflag() {
    log "$PKG" "Flag added: $1"

    flagsed "s/$/ $1/g"
}

delflag() {
    log "$PKG" "Flag removed: $1"

    flagsed "s/$1//g"
}

musl() {
    log "$PKG" "Using musl-gcc"

    addflag "-static"
    export CC=musl-gcc
}

case "$TYPE" in
    pre-build)
        export _CC="${CC:=gcc}"
        export _CFLAGS="$CFLAGS"
        export _CXXFLAGS="$CXXFLAGS"
        export _LDFLAGS="$LDFLAGS"

        case "$PKG" in
            alsa-lib | efivar)
                addflag "-flto-partition=none" ;;

            libressl | lzo | zstd | zlib | curl)
                addflag "-ffat-lto-objects" ;;

            # These packages have custom configuration to enable LTO
            ffmpeg | gcc | python) nolto ;;

            glibc) nolto ;;

            # RUSTFLAGS will probably be the way to go if this
            # bug gets fixed:
            # https://github.com/rust-lang/rust/issues/49175
            # "I'm going to close this as it's not feasible today
            # and probably not something we'll want to do for
            # quite some time if ever."
            rust) nolto ;;

            llvm)
                # LTO broken for now
                nolto
                delflag "-fno-semantic-interposition"

                # Required for clang
                # addflag "-ffat-lto-objects"
            ;;

            # Statically link a few packages against musl
            busybox | ssu)
                musl ;;

            *)
                grep rust "$repo_dir/depends" && addflag "-ffat-lto-objects" ;;
        esac

        IFS=. read -r _start _ < /proc/uptime
    ;;

    post-build)
        : "${DEST:?DEST is unset}"

        export CC="$_CC"
        export CFLAGS="$_CFLAGS"
        export CXXFLAGS="$_CFLAGS"
        export LDFLAGS="$_LDFLAGS"

        rm -rf  "$3/usr/share/gettext" \
                "$3/usr/share/polkit-1" \
                "$3/usr/share/locale" \
                "$3/usr/share/info"

        IFS=. read -r _end _ < /proc/uptime

        (
            _s=$((_end - _start))
            _h=$((_s / 60 / 60 % 24))
            _m=$((_s / 60 % 60))

            [ "$_h" = 0 ] || _u="${_u}${_h}h "
            [ "$_m" = 0 ] || _u="${_u}${_m}m "

            log "$PKG" "Build finished in ${_u:-${_s}s}"
        )
    ;;

esac
